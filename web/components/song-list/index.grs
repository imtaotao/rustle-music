<template>
  <div styleName='container'>
    <div styleName='bg-box' :style='{backgroundImage: "url("+ this.props.playlist.coverImgUrl +")"}'></div>
    <Head styleName='head'/>
    <div styleName='list-info-box'>
      <div styleName='list-img' :style='{backgroundImage: "url("+ this.props.playlist.coverImgUrl +")"}'></div>
      <div styleName='detail-info'>
        <div styleName='list-name'>
          <span>歌单</span>
          <b>{{ this.getListName() }}</b>
        </div>
        <div styleName='author'>
          <i :style='{backgroundImage: "url("+ this.props.playlist.creator.avatarUrl +")"}'></i>
          <span styleName='name'>{{ this.props.playlist.creator.nickname || '-' }}</span>
          <span>{{ this.getCreateTime() }} 创建</span>
        </div>
        <div styleName='operational'>
          <ul>
            <li styleName='play'>
              <div styleName='play-all'>
                <i></i>
                <span>播放全部</span>
              </div>
              <div styleName='add-all'><i></i></div>
            </li>
            <li v-for="(val, i) of tagList" :style='this.getCollectBtnStyle(i)'>
              <i></i>
              <span>{{ val }}{{ this.getTagCount(i) }}</span>
            </li>
          </ul>
        </div>
        <ul styleName='more-info-box'>
          <li v-show='!this.props.playlist.isMyLikeList'>
            <span styleName='title'>标签</span>：
            <span>
              <span v-if='this.canShowTag()' v-for='(val, i) of this.props.playlist.tags'>
                <a styleName='tag'>{{ val }}</a>
                <span v-if='i < 2' style='display:inline-block;margin:0 5px;'>/</span>
              </span>
              <span v-if='!this.canShowTag()'>暂无标签</span>
            </span>
          </li>
          <li>
            <span styleName='title'>歌曲数</span>：<span styleName='count'>{{ this.props.playlist.trackCount }}</span>
            <span styleName='title second'>播放数</span>：<span styleName='count'>{{ this.filterCount(this.props.playlist.playCount) }}</span>
          </li>
          <li v-show='this.props.playlist.isMyLikeList' style='height: 30px;'></li>
          <li v-show='!this.props.playlist.isMyLikeList'>
            <span styleName='title'>简介</span>：
            <span :styleName='"description " + (extendsDesc ? "zoom-out" : "zoom")'>{{ this.props.playlist.description || '暂无简介' }}</span>
            <i
              :styleName='"array " + (extendsDesc ? "bottom" : "top")'
              v-show='!!this.props.playlist.description'
              @click='this.extendsDescription'
             ></i>
          </li>
        </ul>
      </div>
    </div>
    <main styleName='main-content'>
      list
    </main>
  </div>
</template>

<script>

// playlist: {
//   creator: {}, // 歌单创建者的信息
//   tags: ['-', '-'], // 标签
//   name: '-- --', // 歌单名字
//   coverImgUrl: '', // 背景图片
//   createTime: '-', // 创建时间
//   description: '-', // 歌单描述
//   playCount: 0, // 播放数量
//   trackCount: 0, // 歌曲数量
//   shareCount: 0, // 歌单分享数量
//   commentCount: 0, // 评论数量
//   subscribedCount: 0, // 订阅数量
// }
  import Head from 'web/components/head'
  import { timestampToTime, filterCount } from 'web/utils'
  import UserManager from 'web/manager/user'

  @Grass.CSSModules(style)
  export default class SongList extends Grass.Component {
    // #temp
    component = { Head }
    filterCount = filterCount
    didReceiveProps = () => { console.log(this.props.playlist);return this.updataSongListInfo(); }
    willReceiveProps = newProps => newProps.id !== this.props.id
    getListName = () =>  this.props.playlist.name.replace(UserManager.nickname, '我')

    defaultState = {
      shareCount: '---',
      extendsDesc: false,
      privileges: [],
      tagList: ['收藏', '分享', '下载全部'],
    }

    beforeCreate () {
      this.state = this.defaultState
      this.updataSongListInfo()
      console.log(this.props.playlist);
    }

    extendsDescription = e => {
      this.setState({extendsDesc: !this.state.extendsDesc})
    }

    getCollectBtnStyle (i) {
      return i === 0 && !this.props.playlist.isCollectList
        ? {color: '#bbb9b1'}
        : {}
    }

    canShowTag () {
      const tags = this.props.playlist.tags
      return tags && tags.length > 0
    }

    getTagImage (i) {

    }

    getTagCount (i) {
      switch (i) {
        case 0 :
          return `(${filterCount(this.props.playlist.subscribedCount)})`
        case 1 :
          return `(${filterCount(this.state.shareCount)})`
        default :
          return ''
      }
    }

    getCreateTime () {
      let { year, month, day } = timestampToTime(this.props.playlist.createTime)
      isNaN(day) && (day = 0)
      isNaN(year) && (year = 0)
      isNaN(month) && (month = 0)
      return `${year}-${month}-${day}`
    }

    updataSongListInfo () {
      const id = this.props.id
      if (id) {
        // 切换歌单时，清空背景图片
        this.setState(this.defaultState)
        UserManager.getSongListDetail(id).then(({body}) => {
          if (this.props.id === id) {
            this.setState({
              shareCount: body.playlist.shareCount,
              privileges: body.privileges,
            })
          }
        })
      }
    }
  }
</script>