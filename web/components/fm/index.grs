<template>
  <div
    styleName='container'
    @scroll='this.scroll()'
  >
    <div styleName='top'>
      <div
        styleName='bg'
        :style='this.getPicUrl(current)'
      >
      </div>
      <div styleName='song-img'>
        <div
          v-for='(val, i) of data'
          :style='this.getPicUrl(val)'
          @click='this.previousPlay.bind(this, i)'
          :styleName='"img-box-" + this.getMoveStyleName(i)'
        >
          <div
            v-if='i !== 2'
            @click='this.togglePlay'
            :styleName='playing ? "play" : ""'
            :className='playing ? "icon-pause" : "icon-play"'
          >
          </div>
        </div>
        <div styleName='btns'>
          <button @click='this.like'>
            <i :className='isLike ? "icon-like2" : "icon-like1"'></i>
          </button>
          <button @click='this.nextPlay'>
            <i className='icon-next'></i>
          </button>
        </div>
      </div>
      <div
        v-if='current.id !== 0'
        styleName='song-content'
      >
        <div styleName='song-name'>
          <b>{{ current.name }}</b>
          <span>极高音质</span>
        </div>
        <ul styleName='song-info'>
          <li>专辑：<span>{{ (current.al || current.album).name }}</span></li>
          <li>
            歌手：
            <span v-for='(item, i) of current.ar || current.artists'>
              <b v-if='i > 0'> / </b>
              {{ item.name }}
            </span>
          </li>
        </ul>
        <SongLyric styleName='lyric' :lyric='lyric' type='fm'/>
      </div>
    </div>
    <div styleName='bottom' v-show='current !== 0'>
      <div styleName='title'>
        <p><b>听友评论</b><span>（已有{{ total }}条评论）</span></p>
        <p>
          <span><i className='icon-pen'></i>发表评论</span>
          <i
            styleName='expression'
            className='icon-expression'
          ></i>
        </p>
      </div>
      <Comments
        type='music'
        :id='current.id'
        :setCommentLen='this.setCommentLen'
      />
    </div>
  </div>
</template>

<script>
  import { notice, scrollEvent } from 'web/utils'
  import Router from 'web/manager/router'
  import SongManager from 'web/manager/song'
  import UserManager from 'web/manager/user'
  import RuntimeManager from 'web/manager/runtime'
  import SongLyric from 'web/components/song-lyric'
  import Comments from 'web/components/comment-form'

  let count = 0
  const Hearken = RuntimeManager.Hearken

  @Grass.CSSModules(style)
  export default class PrivateFM extends Grass.Component {
    // #temp
    component = { Comments, SongLyric }

    willReceiveProps = () => false

    beforeCreate () {
      const defaultItem = {
        album: {},
        id: 0,
      }
      this.state = {
        id: 0,
        total: 0,
        lyric: '',
        move: null,
        isLike: false,
        data: [defaultItem, defaultItem],
        playing: RuntimeManager.module === 'fm' ?  Hearken.playing() : false,
        current: RuntimeManager.module === 'fm' ? RuntimeManager.current : defaultItem,
      }

      const replaceFMdataAndPlay = () => {
        const fn = data => {
          if (Hearken.state === null) {
            // 如果切换到 fm 页面，而且并没有音频播放，就可以直接播放
            this.pushNewData(data)
            RuntimeManager.specifiedPlay(1)
            this.setState({
              current: data[1],
              isLike: SongManager.has(data[1].id),
            })
          } else {
            // 否则只是更改页面数据，并不播放
            this.setState({
              data,
              current: data[1],
              isLike: SongManager.has(data[1].id),
              playing: RuntimeManager.module === 'fm' ?  Hearken.playing() : false,
            })
          }
          this.getSongLyric()
        }

        if (this.state.data && this.state.data[0] === defaultItem) {
          this.getFMdata(fn)
        } else {
          fn(this.state.data)
        }
      }

      SongManager.on('update', () => {
        this.setState({
          isLike: SongManager.has(this.state.current.id),
        })
      })

      UserManager.on('login', () => {
        if (Router.current.val === 'fm') {
          replaceFMdataAndPlay()
        }
      })

      UserManager.on('logout', () => {
        this.setState({
          id: 0,
          lyric: '',
          playing: false,
          current: defaultItem,
          data: [defaultItem, defaultItem],
        })
        RuntimeManager.setModule('normal')
      })

      Router.on('changed', url => {
        if (url === 'fm') {
          replaceFMdataAndPlay()
        }
      })

      RuntimeManager.on('currentChanged', current => {
        if (current !== this.current && RuntimeManager.module === 'fm') {
          this.setState({
            current,
            isLike: SongManager.has(current.id),
          })
        }
      })

      // 阻止默认的next方法，使用自定义的
      RuntimeManager.on('nextBefore', () => {
        // 如果当前模式不是
        if (RuntimeManager.module !== 'fm') return
        // 图片切换动画而且阻止连续切换
        const delay = 260
        RuntimeManager.setDisableSwitch(true)

        // 如果是先往前播放在播放下一首
        if (RuntimeManager.findCurrentIndex() === 0) {
          this.setState({move: 'nomarl'})
          setTimeout(() => {
            RuntimeManager.setDisableSwitch(false)
            RuntimeManager.specifiedPlay(1)
            this.getSongLyric()
            this.setState({
              move: null,
              current: RuntimeManager.current,
              isLike: SongManager.has(RuntimeManager.current.id),
            })
          }, delay)
        } else {
          // 否则就需要获取新数据
          this.setState({move: 'left'})
          this.getFMdata((data, _count) => {
            setTimeout(() => {
              if (count !== _count) return
              const newData = RuntimeManager.playlist.slice(1)
              newData.push(data[data.length - 1])

              // 动画切换完成后可以继续进行操作
              this.pushNewData(newData)
              RuntimeManager.setDisableSwitch(false)
              RuntimeManager.specifiedPlay(1)
              this.getSongLyric()
              this.setState({
                move: null,
                current: RuntimeManager.current,
                isLike: SongManager.has(RuntimeManager.current.id),
              })
            }, delay)
          })
        }
      })

      const fn = () => {
        if (RuntimeManager.module !== 'fm') return
        this.setState({playing: Hearken.playing()})
      }
      Hearken.on('start', fn)
      Hearken.on('stop', fn)
      Hearken.on('play', fn)
      Hearken.on('pause', fn)
    }

    pushNewData = data => {
      this.setState({data})
      RuntimeManager.setModule('fm')
      RuntimeManager.replaceAll('_fm', data)
    }

    togglePlay = e => {
      if (RuntimeManager.module !== 'fm') {
        this.pushNewData(this.state.data)
        RuntimeManager.specifiedPlay(1)
      } else {
        if (this.state.playing) {
          Hearken.fadePause(0.5)
        } else if (Hearken.state) {
          Hearken.fadePlay(1)
        } else {
          if (RuntimeManager.current.id === 0) {
            return notice('播放失败')
          }
          // 如果 state 为 null 代表需要通过 start 播放
          Hearken.restart(1).then(success => {
            if (!success) {
              RuntimeManager.specifiedPlay(RuntimeManager.current)
            }
          })
        }
      }
    }

    getFMdata (cb) {
      if (!UserManager.logged) {
        return notice('登录后才能使用私人fm')
      }

      count++

      const sfn = ({body}) => {
        if (body.data && body.data.length > 0) {
          if (body.data.length > 3) {
            body.data.length = 3
          }
          cb && cb(body.data, count)
        }
      }
      const efn = err => notice(err.body.msg)
      window.node.request('/personal_fm').then(sfn, efn)
    }

    getSongLyric () {
      setTimeout(() => {
        const id = this.state.current.id
        if (id !== 0) {
          this.setState({id, lyric: '歌词加载中...'})

          const sfn = ({body}) => {
            if (id !== this.state.id) return
            let lyric = '纯音乐，请您欣赏'
            if (!body.nolyric) {
              lyric = (body.lrc && body.lrc.lyric) || '当前歌曲暂无歌词'
            }
            this.setState({id, lyric})
          }
          const efn = err => notice('歌词加载失败')
          window.node.request('/lyric?id=' + id).then(sfn, efn)
        }
      })
    }

    getMoveStyleName (i) {
      if (!this.state.move) return i
      if (this.state.move === 'nomarl') {
        return i + ' animate'
      }
      const baseName = this.state.move === 'left'
        ? i - 1
        : i + 1
      return baseName + ' animate'
    }

    getPicUrl (item) {
      const album = item.album || item.al
      if (!album || !album.picUrl) return {}
      return {backgroundImage: `url(${album.picUrl})`}
    }

    nextPlay = e => {
      if (RuntimeManager.module !== 'fm') {
        this.pushNewData(this.state.data)
        RuntimeManager.specifiedPlay(1)
      } else {
        RuntimeManager.next()
      }
    }

    previousPlay (i) {
      if (i === 0) {
        if (RuntimeManager.module !== 'fm') {
          this.pushNewData(this.state.data)
          RuntimeManager.specifiedPlay(this.state.data[i])
        } else {
          RuntimeManager.previous()
        }
        this.getSongLyric()
        this.setState({
          move: 'right',
          current: RuntimeManager.current,
          isLike: SongManager.has(RuntimeManager.current.id),
        })
      }
    }

    scroll () {
      return scrollEvent('MainHead')
    }

    // 收藏或者取消收藏歌曲
    like = () => {
      if (this.state.current.id !== 0) {
        SongManager.requestLike(this.state.current.id)
      }
    }

    setCommentLen = total => {
      this.setState({total})
    }
  }
</script>