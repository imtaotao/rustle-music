<template>
  <div
    styleName='container animate'
    :style='{bottom: showBg ? "-4px" : "68px"}'
  >
    <canvas id='PlayerVisualization' width='720' height='80'></canvas>
  </div>
</template>

<script>
  import RuntimeManager from 'web/manager/runtime'
  import SongDeatil from 'web/components/song-detail'

  const colors = [
    '#0288D1',
    '#cf4b3d',
    '#43A047',
    '#455A64',
    '#6A1B9A',
    '#1B5E20',
    '#D81B60',
  ]

  @Grass.CSSModules(style)
  export default class Visualization extends Grass.Component {
    // #temp
    timer = null

    state = {
      showBg: false,
    }

    created (dom) {
      // 是否显示背景
      SongDeatil.on(showBg => this.setState({showBg}))
      const canvas = dom.querySelector('#PlayerVisualization')
      if (canvas) {
        this.start(canvas.getContext('2d'))
      }
    }

    destroy () {
      this.clearTimer()
      SongDeatil.remove()
    }

    clearTimer () {
      if (this.timer) {
        cancelAnimationFrame(this.timer)
        this.timer = null
      }
    }

    start (ctx) {
      this.setCtxStyle(ctx)

      const animate = () => {
        this.clearTimer()
        this.timer = requestAnimationFrame(() => {
          const data = RuntimeManager.Hearken.getVisualizerData()
          data && this.draw(ctx, data)
          animate()
        })
      }
      animate()
    }

    setCtxStyle (ctx) {
      const color = colors[Math.floor(Math.random() * colors.length)]
      ctx.shadowBlur = 20
      ctx.fillStyle = color
      ctx.shadowColor = color
    }

    draw (ctx, data) {
      let i = 0
      let j = 0
      const margin = 20
      const len = data.length
      const startDistance = -295
      const leftData = data.slice().reverse()
      ctx.clearRect(0, 0, 900, 100)

      // 左边
      for (; i < len; i++) {
        const h = leftData[i] / 15
        this.drawSingle(ctx, margin * i + startDistance, h)
      }

      // 右边
      for (; j < len; j++) {
        const h = data[j] / 15
        this.drawSingle(ctx, margin * i++ + startDistance, h)
      }
    }

    drawSingle (ctx, x, h) {
      ctx.beginPath()
      ctx.ellipse(x, 90 - h, 3, h, 0, 0, 2 * Math.PI)
      ctx.fill()
    }
  }
</script>