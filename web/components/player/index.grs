<template>
  <div styleName='container'>
    <Progress/>
    <div styleName='blur-bg'></div>
    <div styleName='content'>
      <div styleName='left'>
        <div styleName='song-img' v-show='showDesc'>
          <div styleName='img-content' :style='{backgroundImage: "url("+ (current.al || current.album).picUrl +")"}'></div>
          <div styleName='zoom' className='icon-zoom'></div>
        </div>
        <div styleName='desc' v-show='showDesc'>
          <div styleName='name'>{{ current.name }}</div>
            <div styleName='auth'>
              <span v-for='(val, i) of current.ar || current.artists'>
                <a v-if='i !== 0'> / </a>
                {{ val.name }}
              </span>
            </div>
        </div>
      </div>
      <div styleName='center'>
        <ul>
          <li styleName='icon' className='icon-like1'></li>
          <li styleName='icon play-order' :className='"icon-" + mode' @click='this.setMode'>
            <div>{{ playOrderDesc }}</div>
          </li>
          <li styleName='time'>{{ this.getDuration() }}</li>
          <li styleName='icon' className='icon-pre' @click='this.preSong'></li>
          <li
            styleName='play'
            :className='"icon-" + (playing ? "pause" : "play")'
            @click='this.togglePlay'></li>
          <li styleName='icon' className='icon-next' @click='this.nextSong'></li>
          <li styleName='time'>32:12</li>
          <li styleName='icon big' className='icon-lyrics'></li>
          <li styleName='icon share' className='icon-share' @click='() => this.setState({showCopyLink: !showCopyLink})'>
            <div styleName='share-box' v-show='showCopyLink'>
              <div><i></i>复制链接</div>
              <span></span>
            </div>
          </li>
        </ul>
      </div>
      <div styleName='right'>
        <div styleName='icon' className='icon-list' @click='() => this.setState({showPlayList: !showPlayList})'></div>
        <div styleName='icon' className='icon-volume'></div>
      </div>
    </div>
    <div styleName='play-list' v-show='showPlayList' @click.self='this.hidePlayList'>
      <PlayList/>
    </div>
  </div>
</template>

<script>
  import { notice, getDuration } from 'web/utils'
  import RuntimeManager from 'web/manager/runtime'
  import PlayList from 'web/components/play-list'
  import Progress from 'web/components/player-progress'

  const Hearken = RuntimeManager.Hearken
  const playOrderDesc = {
    'cycle': '循环播放',
    'random': '随机播放',
    'song-cycle': '单曲循环',
  }

  @Grass.CSSModules(style)
  export default class Player extends Grass.Component {
    // #temp
    component = { Progress, PlayList }

    beforeCreate () {
      this.state = {
        showDesc: RuntimeManager.started || RuntimeManager.playlist.length > 0,
        showCopyLink: false,
        showPlayList: false,
        mode: RuntimeManager.mode,
        current: RuntimeManager.current,
        playing: RuntimeManager.Hearken.playing(),
        playOrderDesc: playOrderDesc[RuntimeManager.mode],
      }

      this.monitorRuntimeMagager()
    }

    monitorRuntimeMagager () {
      // 播放列表发送变化
      RuntimeManager.on('playlistChanged', () => {
        this.setState({
          current: RuntimeManager.current,
          showDesc: RuntimeManager.started || RuntimeManager.playlist.length > 0,
        })
      })

      // current 发生变化
      RuntimeManager.on('currentChanged', () => {
        this.setState({
          current: RuntimeManager.current,
        })
      })

      // 播放模式改变
      RuntimeManager.on('modeChanged', () => {
        this.setState({
          mode: RuntimeManager.mode,
          playOrderDesc: playOrderDesc[RuntimeManager.mode],
        })
      })

      // 音频 start
      const fn = () => {
        this.setState({playing: Hearken.playing()})
      }
      Hearken.on('start', fn)
      Hearken.on('stop', fn)
      Hearken.on('play', fn)
      Hearken.on('pause', fn)
      Hearken.on('ended', repeat => {
        switch (RuntimeManager.mode) {
          case 'cycle' :
            this.nextSong()
            break
          case 'song-cycle' :
            repeat()
            break
          case 'random' :
            this.randomPlay()
            break
          default :
            this.nextSong()
        }
      })
    }

    getDuration () {
      const time = this.state.current.dt || this.state.current.duration
      return getDuration(time)
    }

    hidePlayList = () => {
      this.setState({showPlayList: false})
    }

    // 暂停 / 播放
    togglePlay = e => {
      this.state.playing
        ? RuntimeManager.Hearken.fadePause(1.5)
        : RuntimeManager.Hearken.fadePlay(1.5)
    }

    // 切换模式
    setMode = e => {
      const oldMode = RuntimeManager.mode
      switch (RuntimeManager.mode) {
        case 'cycle' :
          RuntimeManager.setMode('song-cycle')
          break
        case 'song-cycle' :
          RuntimeManager.setMode('random')
          break
        case 'random' :
          RuntimeManager.setMode('cycle')
          break
        default :
          RuntimeManager.setMode('cycle')
      }
    }

    // 切换歌曲
    nextSong = e => {
      if (RuntimeManager.playlist.length === 0) {
        return notice('当前播放列表中没有歌曲了')
      }
      !RuntimeManager.next() && notice('播放失败')
    }

    preSong = e => {
      if (RuntimeManager.playlist.length === 0) {
        return notice('当前播放列表中没有歌曲了')
      }
      !RuntimeManager.previous() && notice('播放失败')
    }

    randomPlay = () => {
      if (RuntimeManager.playlist.length === 0) {
        return notice('当前播放列表中没有歌曲了')
      }
      !RuntimeManager.randomPlay() && notice('播放失败')
    }
  }
</script>