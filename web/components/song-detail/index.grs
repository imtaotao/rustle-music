<template>
  <div styleName='container'>
    <div styleName='root-box' v-if='this.song.id !== 0'>
      <div styleName='bg' :style='{backgroundImage: "url("+ (this.song.al || this.song.album).picUrl +")"}'></div>
      <div styleName='content-box' @scroll='this.scroll'>
        <div styleName='left'>
          <div styleName='needle' id='needle'>
            <div styleName='btn'><i></i></div>
          </div>
          <div styleName='disc' id='disc'>
            <i :style='{backgroundImage: "url("+ (this.song.al || this.song.album).picUrl +")"}'></i>
          </div>
        </div>
        <div styleName='right'>
          <div styleName='song-name'>
            <b>{{ this.song.name }}</b>
            <span>极高音质</span>
          </div>
          <ul styleName='song-info'>
            <li>专辑：<span>{{ (this.song.al || this.song.album).name }}</span></li>
            <li>
              歌手：
              <span v-for='(item, i) of this.song.ar || this.song.artists'>
                <b v-if='i > 0'> / </b>
                {{ item.name }}
              </span>
            </li>
          </ul>
          <SongLyric :lyric='lyric'/>
        </div>
        <div styleName='buttom-content-box'>
          <div styleName='comment'>
            <div styleName='title'>
              <p><b>听友评论</b><span>（已有{{ commentLen }}条评论）</span></p>
              <p>
                <span><i className='icon-pen'></i>发表评论</span>
                <i styleName='expression' className='icon-expression'></i>
              </p>
            </div>
            <Comments type='music' :id='this.song.id' :setCommentLen='this.setCommentLen'/>
          </div>
          <div styleName='similar-song-list'></div>
        </div>
      </div>
      <div id='headBox'>
        <Head styleName='head'/>
      </div>
    </div>
  </div>
</template>

<script>
  import { notice } from 'web/utils'
  import Head from 'web/components/head'
  import SongLyric from 'web/components/song-lyric'
  import Comments from 'web/components/comment-form'

  @Grass.CSSModules(style)
  export default class SongDeatil extends Grass.Component {
    // #temp
    timer = null
    component = { Head, Comments, SongLyric }

    get song () {
      return this.props.song
    }

    beforeCreate () {
      this.state = {
        id: null,
        lyric: '',
        commentLen: 0,
      }
      this.setAnimation()
      this.getSongLyric()
    }

    willReceiveProps (newProps) {
      if (newProps.song.id !== this.props.song.id || 
        newProps.playing !== this.props.playing) {
        return true
      }
      return false
    }

    didReceiveProps () {
      const needleNode = document.getElementById('needle')
      if (this.props.song.id !== this.state.id) {
        this.getSongLyric()
        const node = document.getElementById('disc')
        if (node) node.style.transform = ''
      }
      
      if (this.props.playing) {
        this.setAnimation()
      } else if (this.timer) {
        cancelAnimationFrame(this.timer)
        this.timer = null
      }

      setTimeout(() => {
        if (needleNode) {
          needleNode.style.transform = this.props.playing
            ? ''
            : 'rotateZ(-30deg)'
        }
      }, 50)
    }

    setCommentLen = len => {
      this.setState({commentLen: len})
    }

    getSongLyric () {
      const id = this.props.song.id
      this.setState({id, lyric: '歌词加载中...'})

      const sfn = ({body}) => {
        if (id !== this.state.id) return
        let lyric = '纯音乐，请您欣赏'
        if (!body.nolyric) {
          lyric = (body.lrc && body.lrc.lyric) || '当前歌曲暂无歌词'
        }
        this.setState({id, lyric})
      }
      const efn = err => notice('歌词加载失败')
      window.node.request('/lyric?id=' + id).then(sfn, efn)
    }
    
    setAnimation () {
      const node = document.getElementById('disc')
      if (!node || !this.props.playing) return

      let oldReg
      const step = 0.2
      const fn = () => {
        this.timer = requestAnimationFrame(() => {
          let reg
          if (!oldReg) {
            let rotate = node.style.transform
            if (rotate) {
              const res = rotate.match(/rotateZ\((.+)\)/)
              if (res && res[1]) {
                reg = parseInt(res[1])
              }
            }
          } else {
            reg = oldReg
          }
          reg = (reg || 0) + step
          oldReg = reg
          node.style.transform = `rotateZ(${reg}deg)`
          fn()
        })
      }
      fn()
    }

    scroll = e => {
      const node = document.getElementById('headBox')
      if (node) {
        const style = node.style
        if (e.target.scrollTop > 50) {
          if (!style.backdropFilter) {
            style.backdropFilter = 'blur(30px)'
          }
        } else if (style.backdropFilter) {
          style.backdropFilter = ''
        }
      }
    }
  }
</script>