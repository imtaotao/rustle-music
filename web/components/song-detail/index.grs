<template>
  <div styleName='container'>
    <div :styleName='"root-box" + (showBgStar ? " show-bg-bar" : "")' v-if='this.song.id !== 0'>
      <PlayBackground v-show='showBgStar'/>
      <div styleName='bg' :style='{backgroundImage: "url("+ (this.song.al || this.song.album).picUrl +")"}'></div>
      <div styleName='bg-mask'></div>
      <div styleName='content-box' @scroll='this.scroll'>
        <div styleName='left'>
          <div styleName='needle' id='needle'>
            <div styleName='btn'><i></i></div>
          </div>
          <div styleName='disc' id='disc'>
            <i :style='{backgroundImage: "url("+ (this.song.al || this.song.album).picUrl +")"}'></i>
          </div>
          <div :styleName='"pure-mode" + (showBgStar ? " turn-on" : "")'>
            <span>纯净模式</span>
            <div @click='this.toggleShowBgStar'><i></i></div>
          </div>
        </div>
        <div styleName='right'>
          <div styleName='song-name'>
            <b>{{ this.song.name }}</b>
            <span>极高音质</span>
          </div>
          <ul styleName='song-info'>
            <li>专辑：<span>{{ (this.song.al || this.song.album).name }}</span></li>
            <li>
              歌手：
              <span v-for='(item, i) of this.song.ar || this.song.artists'>
                <b v-if='i > 0'> / </b>
                {{ item.name }}
              </span>
            </li>
          </ul>
          <SongLyric :lyric='lyric'/>
        </div>
        <div styleName='buttom-content-box' v-show='!showBgStar'>
          <div styleName='comment'>
            <div styleName='title'>
              <p><b>听友评论</b><span>（已有{{ commentLen }}条评论）</span></p>
              <p>
                <span><i className='icon-pen'></i>发表评论</span>
                <i styleName='expression' className='icon-expression'></i>
              </p>
            </div>
            <Comments type='music' :id='this.song.id' :setCommentLen='this.setCommentLen'/>
          </div>
          <div styleName='similar-song-list'>
            <p styleName='similar-song-title'><b>相似音乐</b></p>
            <ul>
              <li v-for='val of similarSongs'>
                <div styleName='song-img' :style='{backgroundImage: "url("+ val.album.picUrl +")"}'>
                  <div styleName='play-btn' @click='this.playSimilarSong.bind(this, val)'><i></i></div>
                </div>
                <div styleName='info'>
                  <p>{{ val.name }}</p>
                  <p>
                    <a v-for='(item, i) of val.artists'>
                      <b v-if='i > 0'> / </b>
                      {{ item.name }}
                    </a>
                  </p>
                </div>
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div styleName='head-box' id='headBox' v-show='!showBgStar'>
        <Head styleName='head'/>
      </div>
    </div>
  </div>
</template>

<script>
  import { notice } from 'web/utils'
  import Head from 'web/components/head'
  import SongLyric from 'web/components/song-lyric'
  import Comments from 'web/components/comment-form'
  import PlayBackground from 'web/components/play-background'
  import RuntimeManager from 'web/manager/runtime'

  @Grass.CSSModules(style)
  export default class SongDeatil extends Grass.Component {
    // #temp
    timer = null
    component = { Head, Comments, SongLyric, PlayBackground }

    get song () {
      return this.props.song
    }

    beforeCreate () {
      this.state = {
        id: null,
        lyric: '',
        commentLen: 0,
        similarSongs: [],
        showBgStar: false,
      }
      this.setAnimation()
      this.getSongLyric()
      this.getSimilarSong()
    }

    willReceiveProps (newProps) {
      if (newProps.song.id !== this.props.song.id || 
        newProps.playing !== this.props.playing) {
        return true
      }
      return false
    }

    didReceiveProps () {
      const needleNode = document.getElementById('needle')
      if (this.props.song.id !== this.state.id) {
        this.getSongLyric()
        this.getSimilarSong()
        const node = document.getElementById('disc')
        if (node) node.style.transform = ''
      }
      
      if (this.props.playing) {
        this.setAnimation()
      } else if (this.timer) {
        cancelAnimationFrame(this.timer)
        this.timer = null
      }

      setTimeout(() => {
        if (needleNode) {
          needleNode.style.transform = this.props.playing
            ? ''
            : 'rotateZ(-30deg)'
        }
      }, 50)
    }

    setCommentLen = len => {
      this.setState({commentLen: len})
    }

    getPlayCount (playCount) {
      return playCount < 1000
        ? Math.floor(playCount)
        : Math.floor(playCount / 10000) + '万'
    }

    getSongLyric () {
      const id = this.props.song.id
      this.setState({id, lyric: '歌词加载中...'})

      const sfn = ({body}) => {
        if (id !== this.state.id) return
        let lyric = '纯音乐，请您欣赏'
        if (!body.nolyric) {
          lyric = (body.lrc && body.lrc.lyric) || '当前歌曲暂无歌词'
        }
        this.setState({id, lyric})
      }
      const efn = err => notice('歌词加载失败')
      window.node.request('/lyric?id=' + id).then(sfn, efn)
    }
    
    getSimilarSong () {
      const id = this.props.song.id
      const sfn = ({body}) => {
        if (id !== this.state.id) return
        if (body.songs && body.songs.length > 0) {
          this.setState({similarSongs: body.songs})
        }
      }
      const efn = err => console.error(err)
      window.node.request('/simi/song?id=' + id).then(sfn, efn)
    }

    // 播放相似音乐
    playSimilarSong = val => {
      RuntimeManager.specifiedPlay(val)
    }

    toggleShowBgStar = e => {
      this.setState({showBgStar: !this.state.showBgStar})
      const player = document.getElementById('Player')
      if (player) {
        player.style.display = !this.state.showBgStar ? 'none' : ''
      }
    }

    setAnimation () {
      const node = document.getElementById('disc')
      if (!node || !this.props.playing) return

      let oldReg
      const step = 0.2
      const fn = () => {
        this.timer = requestAnimationFrame(() => {
          let reg
          if (!oldReg) {
            let rotate = node.style.transform
            if (rotate) {
              const res = rotate.match(/rotateZ\((.+)\)/)
              if (res && res[1]) {
                reg = parseInt(res[1])
              }
            }
          } else {
            reg = oldReg
          }
          reg = (reg || 0) + step
          oldReg = reg
          node.style.transform = `rotateZ(${reg}deg)`
          fn()
        })
      }
      fn()
    }

    scroll = e => {
      if (!window.node.macOs()) return
      const node = this.scroll.node || (this.scroll.node = document.getElementById('headBox'))
      if (node) {
        const style = node.style
        if (e.target.scrollTop > 50) {
          if (!style.backdropFilter) {
            style.backdropFilter = 'blur(30px)'
          }
        } else if (style.backdropFilter) {
          style.backdropFilter = ''
        }
      }
    }
  }
</script>